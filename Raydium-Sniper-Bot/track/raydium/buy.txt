import { ApiPoolInfoV4, LIQUIDITY_STATE_LAYOUT_V4, LOOKUP_TABLE_CACHE, Liquidity, LiquidityPoolKeys, MARKET_STATE_LAYOUT_V3, Market, Percent, SPL_ACCOUNT_LAYOUT, SPL_MINT_LAYOUT, TOKEN_PROGRAM_ID, Token, TokenAccount, TokenAmount, buildSimpleTransaction, jsonInfo2PoolKeys } from "@raydium-io/raydium-sdk"
import { Connection, Keypair, LAMPORTS_PER_SOL, PublicKey, VersionedTransaction } from "@solana/web3.js"
import { searcherClient, SearcherClient } from 'jito-ts/dist/sdk/block-engine/searcher';
import { Bundle } from "jito-ts/dist/sdk/block-engine/types";
import { isError } from "jito-ts/dist/sdk/block-engine/utils";
import bs58 from 'bs58';
import fs from 'fs'
import {  blockEngineUrl, jito_auth_keypair, jito_fee, makeTxVersion } from "../config";
import { IPool } from "../utils/types";
import { SOL_ADDRESS } from "../utils/token";
import { BN } from "bn.js";
import { getAssociatedTokenAddress } from "@solana/spl-token";
import axios from "axios";

const amount = 0.00001
const slippageBps = 30

const getWalletTokenAccount = async (connection: Connection, wallet: PublicKey): Promise<TokenAccount[]> => {
    const walletTokenAccount = await connection.getTokenAccountsByOwner(wallet, {
        programId: TOKEN_PROGRAM_ID,
    });
    return walletTokenAccount.value.map((i) => ({
        pubkey: i.pubkey,
        programId: i.account.owner,
        accountInfo: SPL_ACCOUNT_LAYOUT.decode(i.account.data),
    }));
}

const formatAmmKeysById = async (id: string): Promise<ApiPoolInfoV4> => {
    const account = await connection.getAccountInfo(new PublicKey(id))
    if (account === null) throw Error(' get id info error ')
    const info = LIQUIDITY_STATE_LAYOUT_V4.decode(account.data)

    const marketId = info.marketId
    const marketAccount = await connection.getAccountInfo(marketId)
    if (marketAccount === null) throw Error(' get market info error')
    const marketInfo = MARKET_STATE_LAYOUT_V3.decode(marketAccount.data)

    const lpMint = info.lpMint
    const lpMintAccount = await connection.getAccountInfo(lpMint)
    if (lpMintAccount === null) throw Error(' get lp mint info error')
    const lpMintInfo = SPL_MINT_LAYOUT.decode(lpMintAccount.data)

    return {
        id,
        baseMint: info.baseMint.toString(),
        quoteMint: info.quoteMint.toString(),
        lpMint: info.lpMint.toString(),
        baseDecimals: info.baseDecimal.toNumber(),
        quoteDecimals: info.quoteDecimal.toNumber(),
        lpDecimals: lpMintInfo.decimals,
        version: 4,
        programId: account.owner.toString(),
        authority: Liquidity.getAssociatedAuthority({ programId: account.owner }).publicKey.toString(),
        openOrders: info.openOrders.toString(),
        targetOrders: info.targetOrders.toString(),
        baseVault: info.baseVault.toString(),
        quoteVault: info.quoteVault.toString(),
        withdrawQueue: info.withdrawQueue.toString(),
        lpVault: info.lpVault.toString(),
        marketVersion: 3,
        marketProgramId: info.marketProgramId.toString(),
        marketId: info.marketId.toString(),
        marketAuthority: Market.getAssociatedAuthority({ programId: info.marketProgramId, marketId: info.marketId }).publicKey.toString(),
        marketBaseVault: marketInfo.baseVault.toString(),
        marketQuoteVault: marketInfo.quoteVault.toString(),
        marketBids: marketInfo.bids.toString(),
        marketAsks: marketInfo.asks.toString(),
        marketEventQueue: marketInfo.eventQueue.toString(),
        lookupTableAccount: PublicKey.default.toString()
    }
}

const waitFor = (delay: number): Promise<void> => {
    return new Promise(resolve => setTimeout(resolve, delay));
};
// -------------------- jito -----------------
export const onBundleResult = (c: SearcherClient, kind: 'buy' | 'sell') => {
    let first = 0;
    let isResolved = false;

    return new Promise((resolve) => {
        // Set a timeout to reject the promise if no bundle is accepted within 5 seconds
        // setTimeout(() => {
        //     resolve(first);
        //     isResolved = true
        // }, 30000);

        c.onBundleResult(
            (result: any) => {
                if (isResolved) return first;
                // clearTimeout(timeout); // Clear the timeout if a bundle is accepted
                const bundleId = result.bundleId;
                const isAccepted = result.accepted;
                const isRejected = result.rejected;
                if (isResolved == false) {

                    if (isAccepted) {
                        console.log(
                            "bundle accepted, ID:",
                            result.bundleId,
                            " Slot: ",
                            result.accepted!.slot,
                            "type: ", kind
                        );
                        first += 1;
                        isResolved = true;
                        resolve(first); // Resolve with 'first' when a bundle is accepted
                    }
                    if (isRejected) {
                        console.log(kind, "bundle is Rejected:", result);
                        resolve(0)
                        // Do not resolve or reject the promise here

                        // console.log(kind, "error tx:", result.rejected.simulationFailure.txSignature);
                        // resolve(result.rejected.simulationFailure.txSignature)
                    }
                }
            },
            (e: any) => {
                console.log(e);
                // Do not reject the promise here
            }
        );
    });
};

// export const onSig = (signature: string) => {
//     connection.onSignature(signature, async (sig) => {
//         connection.offSignature(signatureHandlerId);
//     })
// }

async function build_bundle(
    search: SearcherClient,
    bundleTransactionLimit: number,
    txs: VersionedTransaction[],
    keypair: Keypair,
    kind: 'buy' | 'sell'
) {
    const accounts = await search.getTipAccounts()
    // console.log('accounts', accounts)
    const _tipAccount = accounts[Math.min(Math.floor(Math.random() * accounts.length), 3)];
    // console.log("tip account:", _tipAccount);
    const tipAccount = new PublicKey(_tipAccount);

    const bund = new Bundle([], bundleTransactionLimit);
    const status = kind == 'buy' ? 'finalized' : 'finalized'
    const resp = await connection.getLatestBlockhash("confirmed");
    bund.addTransactions(...txs)

    let maybeBundle = bund.addTipTx(
        keypair,
        Number(jito_fee),
        tipAccount,
        resp.blockhash
    );

    if (isError(maybeBundle)) {

        throw maybeBundle;
    }
    try {
        const response_bund = await search.sendBundle(maybeBundle);
        console.log(kind, "response_bund:", response_bund);
    } catch (e) {
        console.log(kind, "error sending bundler:", e);
    }
    return maybeBundle;
}

export async function bull_dozer(txs: VersionedTransaction[], keypair: Keypair, kind: 'buy' | 'sell') {
    try {
        // console.log('BLOCK_ENGINE_URL:', blockEngineUrl);
        const bundleTransactionLimit = parseInt('4');
        const jitoKey = Keypair.fromSecretKey(bs58.decode(jito_auth_keypair))
        const search = searcherClient(blockEngineUrl, jitoKey);

        const build_bundle_result = await build_bundle(
            search,
            bundleTransactionLimit,
            txs,
            keypair,
            kind
        );
        const bundle_result = await onBundleResult(search, kind)
        console.log(`${kind} bundle_result`, bundle_result)
        return bundle_result
    } catch (error) {
        console.log(kind, "Error in bundling (bull_dozer)")
        return 0
    }
}

// export async function bundle(txs: VersionedTransaction[], keypair: Keypair) {
//     try {
//         console.log('txs.length',txs.length)
//         const txNum = Math.ceil(txs.length / 3);
//         let successNum = 0
//         for (let i = 0; i < txNum; i++) {
//             const upperIndex = (i + 1) * 3
//             const downIndex = i * 3
//             const newTxs = []
//             for (let j = downIndex; j < upperIndex; j++) {
//                 if (txs[j]) newTxs.push(txs[j])
//             }
//             console.log(`------------- Bundle & Send: ${i + 1} ---------`)
//             let tryNum = 0

//             let success = await bull_dozer(newTxs, keypair);
//             while (success < 1) {
//                 if (!USE_SNIPE_LIST) break
//                 tryNum++
//                 if (tryNum == 3) {
//                     console.log("Bundling failed for 3 times in a row and stopped")
//                     break
//                 }
//                 success = await bull_dozer(newTxs, keypair);
//             }
//             if (success > 0) {
//                 console.log("------------- Bundle Successful ---------");
//                 // return true
//                 successNum++
//             } else console.log("Bundle unsuccessful")
//             // return false
//         }
//         if (successNum == txNum) return true
//         else return false
//     } catch (error) {
//         console.log("Bundling failed because of fee or network problem")
//         return false
//     }
// }

export async function bundle(txs: VersionedTransaction[], keypair: Keypair, kind: 'buy' | 'sell') {
    try {
        console.log(`${kind} --------- Bundle & Send ---------`)

        let success = await bull_dozer(txs, keypair, kind);
        // if (successNum == txNum) return true
        // else return false
        // if(success)
        console.log(success)
        if (success) return true
        else return false
    } catch (error) {
        console.log(kind, "Bundling failed because of fee or network problem")
        return false
    }
}

export const tokenSwap = async (data: IPool | undefined) => {
    try {
        if (!data) return
        console.log('swapping...')
        const { poolId, inputTokenInfo, outputTokenInfo, inputTokenAddr, outputTokenAddr } = data
        if (SOL_ADDRESS == inputTokenAddr || SOL_ADDRESS == outputTokenAddr) {
            console.log('no sol pair')
            return
        }
        const baseToken = new Token(TOKEN_PROGRAM_ID, inputTokenAddr, inputTokenInfo.decimals)
        const quoteToken = new Token(TOKEN_PROGRAM_ID, outputTokenAddr, outputTokenInfo.decimals)
        const inputToken = SOL_ADDRESS == inputTokenAddr ? baseToken : quoteToken
        const outputToken = SOL_ADDRESS == inputTokenAddr ? quoteToken : baseToken
        const inputTokenAmount = new TokenAmount(inputToken, amount * LAMPORTS_PER_SOL)
        // const buySlippage = new Percent(slippageBps, 30)
        // const sellSlippage = new Percent(slippageBps, 100)
        // const userinfo = fs.readFileSync('data.txt', 'utf8')
        // const userPrivKey = userinfo.split(':')[0]
        // const keypair = Keypair.fromSecretKey(
        //     bs58.decode(userPrivKey)
        // )

        console.log('buy tx starting ...', new Date())
        const buyTx = await internalBuy(keypair, poolId, inputTokenAmount, outputToken, buySlippage)
        console.log('buy tx ending ...', new Date())
        await waitFor(3000)
        // const originTokenPrice = (await axios.get(`https://api.dexscreener.com/latest/dex/pairs/solana/${poolId.toString()}`)).data.pair.priceUsd
        // console.log('originTokenPrice', originTokenPrice)
        while (true) {
            try {
                console.log('get token acc ...', new Date())
                const tokenAccount = await getAssociatedTokenAddress(
                    outputToken.mint,
                    keypair.publicKey
                );
                const balance = await connection.getTokenAccountBalance(tokenAccount)

                const sellTokenAmount = new TokenAmount(outputToken, new BN(balance.value.amount))
                const walletTokenAccounts = await getWalletTokenAccount(connection, keypair.publicKey)
                if (balance.value.uiAmount && balance.value.uiAmount > 0) {
                    // while (true) {
                    //     try {
                    // console.log('getting token price ...', new Date())
                    // const tokenPrice = (await axios.get(`https://api.dexscreener.com/latest/dex/pairs/solana/${poolId.toString()}`)).data.pair.priceUsd
                    // console.log('finish token price ...', new Date(), tokenPrice)
                    // if (tokenPrice >= originTokenPrice * 1.25) {
                    console.log('sell tx starting ...', new Date())
                    const sellResult = await internalSell(keypair, poolId, sellTokenAmount, inputToken, sellSlippage, walletTokenAccounts)
                    console.log('sell tx ending ...', new Date())
                    return
                    // }// const tokenData = (await axios.get(`https://api.dexscreener.com/latest/dex/pairs/solana/${poolId}`)).data.pair.priceUsd
                    // await waitFor(100)
                    //     } catch (e) {
                    //         console.log(e)
                    //         // await waitFor(500)
                    //     }
                    // }
                }   //-------------------------
            } catch (e) {
                console.log(e)
                return
            }
        }
        // console.log('buy tx starting ...' , new Date())
        // const buyResult = await internalBuy(keypair, poolId, inputTokenAmount, outputToken, slippage)
        // console.log('buy tx ending ...' , new Date())
        // // // await waitFor(500)
        // try {
        //     const tokenAccount = await getAssociatedTokenAddress(
        //         outputToken.mint,
        //         keypair.publicKey
        //     );
        //     const balance = await connection.getTokenAccountBalance(tokenAccount)
        //     console.log('balance', balance)
        //     const sellTokenAmount = new TokenAmount(outputToken, new BN(balance.value.amount))
        //     // console.log('sellTokenAmount', sellTokenAmount)
        //     const walletTokenAccounts = await getWalletTokenAccount(connection, keypair.publicKey)
        //     const sellResult = await internalSell(keypair, poolId, sellTokenAmount, inputToken, slippage, walletTokenAccounts)
        //     // if (sellResult?.result) return { result: true }
        //     // else return { result: false }
        // } catch (e) {
        //     return { result: false }
        // }
        //-------------------------

    } catch (e) {
        console.log('error', e)
        return { error: 'Unknown error' }
    }
}

export const internalBuy = async (keypair: Keypair, poolId: PublicKey, inputTokenAmount: TokenAmount, outputToken: Token, slippage: Percent,) => {
    try {
        console.log('buying now...')
        const walletTokenAccounts = await getWalletTokenAccount(connection, keypair.publicKey)
        // -------- pre-action: get pool info --------
        const targetPoolInfo = await formatAmmKeysById(poolId.toString())
        // assert(targetPoolInfo, 'cannot find the target pool')
        const poolKeys = jsonInfo2PoolKeys(targetPoolInfo) as LiquidityPoolKeys

        // -------- step 1: coumpute amount out --------
        const { amountOut, minAmountOut } = Liquidity.computeAmountOut({
            poolKeys: poolKeys,
            poolInfo: await Liquidity.fetchInfo({ connection, poolKeys }),
            amountIn: inputTokenAmount,
            currencyOut: outputToken,
            slippage: slippage,
        })

        // -------- step 2: create instructions by SDK function --------
        const { innerTransactions } = await Liquidity.makeSwapInstructionSimple({
            computeBudgetConfig: { units: 200_000, microLamports: 600000 },
            connection,
            poolKeys,
            userKeys: {
                tokenAccounts: walletTokenAccounts,
                owner: keypair.publicKey,
            },
            amountIn: inputTokenAmount,
            amountOut: minAmountOut,
            fixedSide: 'in',
            makeTxVersion,
        })

        const willSendTx = await buildSimpleTransaction({
            connection,
            makeTxVersion,
            payer: keypair.publicKey,
            innerTransactions: innerTransactions,
            addLookupTableInfo: LOOKUP_TABLE_CACHE,
        })

        try {
            const transaction = willSendTx[0] as VersionedTransaction
            transaction.sign([keypair]);
            // return transaction
            // const bundle_result = await bundle([transaction], keypair, 'buy')
            // return { result: bundle_result }
            // ----------------------------------------------
            const rawTransaction = transaction.serialize()
            const txid = await connection.sendRawTransaction(rawTransaction, {
                skipPreflight: true,
                maxRetries: 2
            });
            const signature = `https://solscan.io/tx/${txid}`
            // const simulator = await connection.simulateTransaction(transaction)
            // console.log('simulator', simulator)
            const rest = await connection.confirmTransaction(txid, "confirmed")
            console.log('signature', signature)
            return
        } catch (e) {
            if (e instanceof Error) {
                console.log(`buy->err1`, e)
                return { error: e.name }
            } else {
                console.log(`buy->err2`, e)
                return { error: 'Unknown error, please check your transaction history.' }
            }
        }
    } catch (e) {
        console.log('error', e)
        return { error: 'Unknown error' }
    }
}

export const internalSell = async (keypair: Keypair, poolId: PublicKey, inputTokenAmount: TokenAmount, outputToken: Token, slippage: Percent, walletTokenAccounts: TokenAccount[]) => {
    try {
        console.log('selling now...')
        // -------- pre-action: get pool info --------
        const targetPoolInfo = await formatAmmKeysById(poolId.toString())
        // assert(targetPoolInfo, 'cannot find the target pool')
        const poolKeys = jsonInfo2PoolKeys(targetPoolInfo) as LiquidityPoolKeys

        // -------- step 1: coumpute amount out --------
        const { amountOut, minAmountOut } = Liquidity.computeAmountOut({
            poolKeys: poolKeys,
            poolInfo: await Liquidity.fetchInfo({ connection, poolKeys }),
            amountIn: inputTokenAmount,
            currencyOut: outputToken,
            slippage: slippage,
        })

        // -------- step 2: create instructions by SDK function --------
        const { innerTransactions } = await Liquidity.makeSwapInstructionSimple({
            computeBudgetConfig: { units: 200_000, microLamports: 600000 },
            connection,
            poolKeys,
            userKeys: {
                tokenAccounts: walletTokenAccounts,
                owner: keypair.publicKey,
            },
            amountIn: inputTokenAmount,
            amountOut: minAmountOut,
            fixedSide: 'in',
            makeTxVersion,
        })
        // return

        const willSendTx = await buildSimpleTransaction({
            connection,
            makeTxVersion,
            payer: keypair.publicKey,
            innerTransactions: innerTransactions,
            addLookupTableInfo: LOOKUP_TABLE_CACHE,
        })
        try {
            const transaction = willSendTx[0] as VersionedTransaction
            transaction.sign([keypair]);
            // return transaction
            const bundle_result = await bundle([transaction], keypair, 'sell')
            return { result: bundle_result }
            // --------------------------
            const rawTransaction = transaction.serialize()
            const txid = await connection.sendRawTransaction(rawTransaction, {
                skipPreflight: true,
                maxRetries: 2
            });
            const signature = `https://solscan.io/tx/${txid}`
            // const simulator = await connection.simulateTransaction(transaction)
            // console.log('simulator', simulator)
            const rest = await connection.confirmTransaction(txid, "confirmed")
            console.log('signature', signature)
        } catch (e) {
            if (e instanceof Error) {
                console.log(`sell->err1`, e)
                return { error: e.name }
            } else {
                console.log(`sell->err2`, e)
                return { error: 'Unknown error, please check your transaction history.' }
            }
        }
    } catch (e) {
        console.log('error', e)
        return { error: 'Unknown error' }
    }
}
// export const internalSell = async (keypair: Keypair, poolId: PublicKey, inputTokenAmount: TokenAmount, outputToken: Token, slippage: Percent, walletTokenAccounts: TokenAccount[]) => {
//     try {
//         console.log('selling now...')
//         // -------- pre-action: get pool info --------
//         const targetPoolInfo = await formatAmmKeysById(poolId.toString())
//         // assert(targetPoolInfo, 'cannot find the target pool')
//         const poolKeys = jsonInfo2PoolKeys(targetPoolInfo) as LiquidityPoolKeys

//         // -------- step 1: coumpute amount out --------
//         const { amountOut, minAmountOut } = Liquidity.computeAmountOut({
//             poolKeys: poolKeys,
//             poolInfo: await Liquidity.fetchInfo({ connection, poolKeys }),
//             amountIn: inputTokenAmount,
//             currencyOut: outputToken,
//             slippage: slippage,
//         })

//         // -------- step 2: create instructions by SDK function --------
//         const { innerTransactions } = await Liquidity.makeSwapInstructionSimple({
//             computeBudgetConfig: { units: 200_000, microLamports: 600000 },
//             connection,
//             poolKeys,
//             userKeys: {
//                 tokenAccounts: walletTokenAccounts,
//                 owner: keypair.publicKey,
//             },
//             amountIn: inputTokenAmount,
//             amountOut: minAmountOut,
//             fixedSide: 'in',
//             makeTxVersion,
//         })
//         // return

//         const willSendTx = await buildSimpleTransaction({
//             connection,
//             makeTxVersion,
//             payer: keypair.publicKey,
//             innerTransactions: innerTransactions,
//             addLookupTableInfo: LOOKUP_TABLE_CACHE,
//         })
//         try {
//             const transaction = willSendTx[0] as VersionedTransaction
//             transaction.sign([keypair]);
//             return transaction
//             const bundle_result = await bundle([transaction], keypair, 'sell')
//             return { result: bundle_result }
//             // --------------------------
//             const rawTransaction = transaction.serialize()
//             const txid = await connection.sendRawTransaction(rawTransaction, {
//                 skipPreflight: true,
//                 maxRetries: 2
//             });
//             // signature = `https://solscan.io/tx/${txid}`
//             // const simulator = await connection.simulateTransaction(transaction)
//             // console.log('simulator', simulator)
//             const rest = await connection.confirmTransaction(txid, "confirmed")
//         } catch (e) {
//             if (e instanceof Error) {
//                 console.log(`sell->err1`, e)
//                 return { error: e.name }
//             } else {
//                 console.log(`sell->err2`, e)
//                 return { error: 'Unknown error, please check your transaction history.' }
//             }
//         }
//     } catch (e) {
//         console.log('error', e)
//         return { error: 'Unknown error' }
//     }
// }






// const userinfo = fs.readFileSync('data.txt', 'utf8')
// const userPrivKey = userinfo.split(':')[0]
// const keypair = Keypair.fromSecretKey(
//     bs58.decode(userPrivKey)
// )

// export const externalSell = async (token: PublicKey) => {
//     console.log('external sell')
//     const slippage = new Percent(slippageBps, 100)
//     const inputTokenAddr = token
//     const tokenAccount = await getAssociatedTokenAddress(
//         inputTokenAddr,
//         keypair.publicKey
//     );
//     console.log('tokenAccount', tokenAccount)
//     const balance = await connection.getTokenAccountBalance(tokenAccount)
//     const inputToken = new Token(TOKEN_PROGRAM_ID, inputTokenAddr, balance.value.decimals)
//     const outputToken = new Token(TOKEN_PROGRAM_ID, SOL_ADDRESS, 9)
//     internalSell(keypair, new PublicKey('CQ1P8XbN9cETVTAj1RqzHPxgbWaSUfhbvow41NCQDxe9'), inputToken, outputToken, slippage, 'sell')
// }

// export const externalBuy = async (token: PublicKey, sol_amount: number) => {
//     const dex = (await axios.get(`https://api.dexscreener.com/latest/dex/tokens/${token}`)).data
//     if (!('pairs' in dex)) return undefined
//     const pairs = dex.pairs
//     for (let i = 0; i < pairs.length; i++) {
//         if (pairs[i].chainId == 'solana' && pairs[i].dexId == 'raydium' && ((pairs[i].baseToken.address == SOL_ADDRESS && pairs[i].quoteToken.address == token) && (pairs[i].quoteToken.address == SOL_ADDRESS && pairs[i].baseToken.address == token))) {
//             const slippage = new Percent(slippageBps, 100)
//             const inputTokenAddr = pairs[i].baseToken.address == SOL_ADDRESS ? pairs[i].quoteToken.address : pairs[i].baseToken.address
//             const tokenAccount = await getAssociatedTokenAddress(
//                 inputTokenAddr,
//                 keypair.publicKey
//             );
//             console.log('tokenAccount', tokenAccount)
//             const balance = await connection.getTokenAccountBalance(tokenAccount)
//             const inputToken = new Token(TOKEN_PROGRAM_ID, inputTokenAddr, balance.value.decimals)
//             const outputToken = new Token(TOKEN_PROGRAM_ID, SOL_ADDRESS, 9)
//             const inputTokenAmount = new TokenAmount(inputToken, sol_amount * LAMPORTS_PER_SOL)

//             internalBuy(keypair, pairs[i].pairAddress, inputTokenAmount, outputToken, slippage)
//         }
//     }
// }


const temp = {
    "pairName": "FLOTH / SOL",
    "mintAuthority": null,
    "freezeAuthority": null,
    "description": "Flash the Sloth: Saving the crypto universe, one nap at a time!",
    "links": {
        "Transaction": "https://solscan.io/tx/5xWrYMtMrDPYG5kzwo1SF1siRjA4qwRQwsy2Y96JPy2YkV6KvqMc343WZ17RbDLA4RNQRZf8DDQt8WVF9LHCd4M8"
    },
    "image": "https://bafkreidii7mvpu2mkwcxnd2mfs5xijypppvixi6meifjbkudxrhw3szz4e.ipfs.nftstorage.link/",
    "poolCreateAAmount": "77700000 FLOTH",
    "poolCreateBAmount": "10 SOL",
    "poolId": new PublicKey("46AGQNnAN6G7CpptQVdbCE6bWCDgzN12oCkesSzgKmfE"),
    "inputTokenInfo": {
        "decimals": 9,
        "freezeAuthority": null,
        "isInitialized": true,
        "mintAuthority": null,
        "supply": "777000000000000000"
    },
    "outputTokenInfo": {
        "decimals": 9,
        "freezeAuthority": null,
        "isInitialized": true,
        "mintAuthority": null,
        "supply": "0"
    },
    "inputTokenAddr": new PublicKey("FVytoSqDkAwQNiGBLoaB3y4ahzXyZMz7LH5f8NQFYTxc"),
    "outputTokenAddr": new PublicKey("So11111111111111111111111111111111111111112"),
    "flag": true
}

// tokenSwap(temp)
// externalSell(new PublicKey('DqEDyJgAF83NaVagTJTiy2jLyvFrw44bfurGrdBbESa8'))